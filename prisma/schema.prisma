generator client {
  provider = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]

}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  email           String
  discordBotAuth  Boolean          @default(false)
  features        Feature[]
  featureRequests FeatureRequest[]
  notionAuths     NotionAuth[]
}

model NotionAuth {
  botId                String        @id
  accessToken          String
  owner                String
  duplicatedTemplateId String
  workspaceIcon        String
  workspaceId          String
  workspaceName        String
  userId               String
  guildName            String?
  user                 User          @relation(fields: [userId], references: [id])
  discordUsers         DiscordUser[]
}

model DiscordUser {
  username     String     @id
  notionAuthId String
  notionAuth   NotionAuth @relation(fields: [notionAuthId], references: [botId])
}

model Feature {
  id          Int      @id @default(sequence())
  title       String
  description String
  userId      String
  columnState Int
  rankState   Int
  isSearched  Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  textBox     TextBox?
  featureRequests FeatureRequestMap[]
}

model TextBox {
  id                Int      @id @default(sequence())
  serializedContent String
  localUpdatedAt    DateTime @default(now())
  featureId         Int      @unique
  feature           Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)
}

model FeatureRequest {
  fr_id         String @id
  message_id    String
  message       String
  created_at    String
  author        String
  label         String
  fr            String
  kmeans_labels Int
  userId        String
  user          User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  features FeatureRequestMap[]
}

model FeatureRequestMap {
  feature Feature @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId Int
  featureRequest FeatureRequest @relation(fields: [featureRequestId], references: [fr_id], onDelete: Cascade)
  featureRequestId String
  pinned Boolean @default(false)

  @@id([featureId, featureRequestId])
}
