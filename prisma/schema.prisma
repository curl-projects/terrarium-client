generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  email           String
  discordBotAuth  Boolean          @default(false)
  features        Feature[]
  featureRequests FeatureRequest[]
  notionAuths     NotionAuth[]
  datasets Dataset[]
}

model NotionAuth {
  botId                String        @id
  accessToken          String
  owner                String
  duplicatedTemplateId String
  workspaceIcon        String
  workspaceId          String
  workspaceName        String
  userId               String
  guildName            String?
  discordUsers         DiscordUser[]
  user                 User          @relation(fields: [userId], references: [id])
}

model DiscordUser {
  username     String     @id
  notionAuthId String
  notionAuth   NotionAuth @relation(fields: [notionAuthId], references: [botId])
}

model Feature {
  id                Int                 @id @default(sequence())
  title             String
  description       String              @default("")
  userId            String
  columnState       Int
  rankState         Int
  isSearched        Boolean             @default(false)
  user              User                @relation(fields: [userId], references: [id])
  featureRequests   FeatureRequestMap[]
  clusters Cluster[]
}

model FeatureRequest {
  fr_id         String              @id
  message_id    String
  message       String
  created_at    String
  author        String
  fr            String
  userId        String
  user          User                @relation(fields: [userId], references: [id])
  features      FeatureRequestMap[]
  dataset       Dataset             @relation(fields: [datasetId], references: [datasetId], onDelete: Cascade)
  datasetId     Int      
}

model FeatureRequestMap {
  featureId        Int
  featureRequestId String
  pinned           Boolean        @default(false)
  oldCluster          Int            @default(-1)
  feature          Feature        @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [fr_id], onDelete: Cascade)
  cluster          Cluster? @relation(fields: [clusterId], references: [clusterId], onDelete: SetNull)
  clusterId        Int?
  
  @@id([featureId, featureRequestId])
}

model Thread {
  ticketNumber    String           @id
  threadName      String
  createdTime     String
  threadLink      String
  bugOverview     String
  discordMessages DiscordMessage[]
}

model DiscordMessage {
  id             Int    @id @default(sequence())
  threadId       String
  messageUser    String
  messageContent String
  thread         Thread @relation(fields: [threadId], references: [ticketNumber])
}

model Cluster {
  clusterId Int @id @default(sequence())
  internalClusterId Int @default(-1)
  type String @default("localKMeans")
  feature Feature? @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureId Int?
  description String @default("")
  featureRequestMaps FeatureRequestMap[]
  clusterTags ClusterTag[]
}

model ClusterTag {
  clusterTagId Int @id @default(sequence())
  cluster Cluster @relation(fields: [clusterId], references: [clusterId], onDelete: Cascade)
  clusterId Int
  tagContent String
}

model Dataset {
  datasetId Int @id @default(sequence())
  uniqueFileName String
  size String?
  status String @default("unprocessed")
  user User @relation(fields: [userId], references: [id])
  userId String
  featureRequests FeatureRequest[]
}