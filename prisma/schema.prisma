generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "filteredRelationCount"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model User {
  id              String           @id
  email           String
  discordBotAuth  Boolean          @default(false)
  features        Feature[]
  featureRequests FeatureRequest[]
  notionAuths     NotionAuth[]
}

model NotionAuth {
  botId                String        @id
  accessToken          String
  owner                String
  duplicatedTemplateId String
  workspaceIcon        String
  workspaceId          String
  workspaceName        String
  userId               String
  guildName            String?
  user                 User          @relation(fields: [userId], references: [id])
  discordUsers         DiscordUser[]
}

model DiscordUser {
  username     String     @id
  notionAuthId String
  notionAuth   NotionAuth @relation(fields: [notionAuthId], references: [botId])
}

model Feature {
  id              Int                 @id @default(sequence())
  title           String
  description     String @default("")
  userId          String
  columnState     Int
  rankState       Int
  isSearched      Boolean             @default(false)
  user            User                @relation(fields: [userId], references: [id])
  featureRequests FeatureRequestMap[]
}

model FeatureRequest {
  fr_id         String              @id
  message_id    String
  message       String
  created_at    String
  author        String
  label         String
  fr            String
  kmeans_labels Int
  userId        String
  user          User                @relation(fields: [userId], references: [id])
  features      FeatureRequestMap[]
}

model FeatureRequestMap {
  featureId        Int
  featureRequestId String
  pinned           Boolean        @default(false)
  feature          Feature        @relation(fields: [featureId], references: [id], onDelete: Cascade)
  featureRequest   FeatureRequest @relation(fields: [featureRequestId], references: [fr_id], onDelete: Cascade)

  @@id([featureId, featureRequestId])
}

model Thread {
  ticketNumber    String           @id
  threadName      String
  createdTime     String
  threadLink      String
  bugOverview     String
  discordMessages DiscordMessage[]
}

model DiscordMessage {
  id             Int    @id @default(sequence())
  threadId       String
  messageUser    String
  messageContent String
  thread         Thread @relation(fields: [threadId], references: [ticketNumber])
}
